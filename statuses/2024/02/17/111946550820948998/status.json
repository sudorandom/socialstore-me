{
  "id": "111946550820948998",
  "uri": "https://infosec.exchange/users/sudorandom/statuses/111946550820948998",
  "url": "https://infosec.exchange/@sudorandom/111946550820948998",
  "account": {
    "id": "109300069582362316",
    "username": "sudorandom",
    "acct": "sudorandom",
    "display_name": "Kevin McDonald",
    "locked": false,
    "created_at": "2022-11-07T00:00:00Z",
    "followers_count": 196,
    "following_count": 70,
    "statuses_count": 709,
    "note": "\u003cp\u003eSoftware Engineer. I post about backend programming, and nonsense. \u2029ðŸ‡ºðŸ‡¸ living in ðŸ‡©ðŸ‡°\u2029\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://kmcd.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" translate=\"no\"\u003e\u003cspan class=\"invisible\"\u003ehttps://\u003c/span\u003e\u003cspan class=\"\"\u003ekmcd.dev\u003c/span\u003e\u003cspan class=\"invisible\"\u003e\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e",
    "url": "https://infosec.exchange/@sudorandom",
    "avatar": "https://media.infosec.exchange/infosec.exchange/accounts/avatars/109/300/069/582/362/316/original/37209718fa7513e2.jpg",
    "avatar_static": "https://media.infosec.exchange/infosec.exchange/accounts/avatars/109/300/069/582/362/316/original/37209718fa7513e2.jpg",
    "header": "https://media.infosec.exchange/infosec.exchange/accounts/headers/109/300/069/582/362/316/original/2c905419ef36413a.png",
    "header_static": "https://media.infosec.exchange/infosec.exchange/accounts/headers/109/300/069/582/362/316/original/2c905419ef36413a.png",
    "emojis": [],
    "moved": null,
    "fields": [
      {
        "name": "Languages",
        "value": "English, Danish (beginner)",
        "verified_at": "0001-01-01T00:00:00Z"
      },
      {
        "name": "Interests",
        "value": "programming, doing weird things with data, video games, board games",
        "verified_at": "0001-01-01T00:00:00Z"
      },
      {
        "name": "Website",
        "value": "\u003ca href=\"https://kmcd.dev\" target=\"_blank\" rel=\"nofollow noopener noreferrer me\" translate=\"no\"\u003e\u003cspan class=\"invisible\"\u003ehttps://\u003c/span\u003e\u003cspan class=\"\"\u003ekmcd.dev\u003c/span\u003e\u003cspan class=\"invisible\"\u003e\u003c/span\u003e\u003c/a\u003e",
        "verified_at": "2024-05-25T17:40:09.733Z"
      }
    ],
    "bot": false,
    "discoverable": true,
    "source": null,
    "followed_tags": null
  },
  "in_reply_to_id": null,
  "in_reply_to_account_id": null,
  "reblog": null,
  "content": "\u003cp\u003eLet\u0026#39;s find out how gRPC works by implementing the world\u0026#39;s simplest gRPC server in Go. This is part two in a series where I explore the gRPC protocol by making extremely simple gRPC implementations. Last time I made a gRPC client. This time we\u0026#39;re tackling the server.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://sudorandom.dev/posts/grpc-from-scratch-part-2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\" translate=\"no\"\u003e\u003cspan class=\"invisible\"\u003ehttps://\u003c/span\u003e\u003cspan class=\"ellipsis\"\u003esudorandom.dev/posts/grpc-from\u003c/span\u003e\u003cspan class=\"invisible\"\u003e-scratch-part-2/\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://infosec.exchange/tags/grpc\" class=\"mention hashtag\" rel=\"tag\"\u003e#\u003cspan\u003egrpc\u003c/span\u003e\u003c/a\u003e \u003ca href=\"https://infosec.exchange/tags/golang\" class=\"mention hashtag\" rel=\"tag\"\u003e#\u003cspan\u003egolang\u003c/span\u003e\u003c/a\u003e \u003ca href=\"https://infosec.exchange/tags/http2\" class=\"mention hashtag\" rel=\"tag\"\u003e#\u003cspan\u003ehttp2\u003c/span\u003e\u003c/a\u003e \u003ca href=\"https://infosec.exchange/tags/protobuf\" class=\"mention hashtag\" rel=\"tag\"\u003e#\u003cspan\u003eprotobuf\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e",
  "created_at": "2024-02-17T11:20:05.252Z",
  "edited_at": "0001-01-01T00:00:00Z",
  "emojis": [],
  "replies_count": 0,
  "reblogs_count": 1,
  "favourites_count": 0,
  "reblogged": false,
  "favourited": false,
  "bookmarked": false,
  "muted": false,
  "sensitive": false,
  "spoiler_text": "",
  "visibility": "public",
  "media_attachments": [],
  "mentions": [],
  "tags": [
    {
      "name": "grpc",
      "url": "https://infosec.exchange/tags/grpc",
      "history": null
    },
    {
      "name": "golang",
      "url": "https://infosec.exchange/tags/golang",
      "history": null
    },
    {
      "name": "http2",
      "url": "https://infosec.exchange/tags/http2",
      "history": null
    },
    {
      "name": "protobuf",
      "url": "https://infosec.exchange/tags/protobuf",
      "history": null
    }
  ],
  "card": {
    "url": "https://sudorandom.dev/posts/grpc-from-scratch-part-2/",
    "title": "gRPC From Scratch: Part 2 - Server",
    "description": "Last part we created a simple gRPC client. Let's take it a bit further. Let's implement a simple gRPC server in go.",
    "image": "",
    "type": "link",
    "author_name": "",
    "author_url": "",
    "provider_name": "",
    "provider_url": "",
    "html": "",
    "width": 1200,
    "height": 630
  },
  "poll": null,
  "application": {
    "id": "",
    "redirect_uri": "",
    "client_id": "",
    "client_secret": ""
  },
  "language": "en",
  "pinned": false,
  "params": {
    "application_id": "",
    "idempotency": "",
    "in_reply_to_id": null,
    "media_ids": null,
    "poll": null,
    "sensitive": false,
    "spoiler_text": "",
    "text": "",
    "visibility": ""
  }
}